{"version":3,"sources":["components/Display/Display.module.css","components/Button/Button.module.css","components/Button/Button.tsx","components/Display/Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","children","onClick","isDisable","restProps","useState","isMouseDown","setIsMouseDown","disabled","className","s","button","buttonDown","onMouseDown","onMouseUp","Display","count","maxValue","startValue","view","setMaxValue","setStartValue","message","error","display","settings","field","fieldFirst","label","fieldItem","type","value","size","input","onChange","fieldSecond","mainWindow","errorMessage","total","red","App","JSON","parse","localStorage","getItem","setCount","setMessage","setError","isDisabledSet","setIsDisabledSet","useEffect","e","currentTarget","setItem","stringify","Boolean","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9eb7fc09.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2n21m\",\"mainWindow\":\"Display_mainWindow__140SA\",\"settings\":\"Display_settings__MjcOq\",\"field\":\"Display_field__25h01\",\"label\":\"Display_label__AlTaw\",\"fieldItem\":\"Display_fieldItem__1yvJm\",\"fieldFirst\":\"Display_fieldFirst__2EEse\",\"fieldSecond\":\"Display_fieldSecond__2r3Sp\",\"input\":\"Display_input__2TD4b\",\"total\":\"Display_total__3GvgE\",\"message\":\"Display_message__1YAFa\",\"errorMessage\":\"Display_errorMessage__3pWDE\",\"error\":\"Display_error__3bxsJ\",\"red\":\"Display_red__1KrWH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\",\"buttonDown\":\"Button_buttonDown__delwq\"};","import React, {useState} from 'react';\nimport s from './Button.module.css';\n\ntype PropsType = {\n   onClick: () => void\n   isDisable?: boolean\n}\n\nexport const Button: React.FC<PropsType> = (props) => {\n   const {children, onClick, isDisable, ...restProps} = props;\n\n   const [isMouseDown, setIsMouseDown] = useState(false);\n\n   const onMouseDownHandler = () => setIsMouseDown(true);\n   const onMouseUpHandler = () => setIsMouseDown(false);\n\n   return (\n      <button disabled={isDisable}\n              onClick={onClick}\n              className={`${s.button} ${isMouseDown ? s.buttonDown : ''}`}\n              {...restProps}\n              onMouseDown={onMouseDownHandler}\n              onMouseUp={onMouseUpHandler}>\n         {children}\n      </button>\n   );\n}","import React, {ChangeEvent} from 'react';\nimport s from './Display.module.css';\n\nexport type ViewType = 'settings' | 'main';\nexport type PropsType = {\n   count?: number\n   maxValue?: number\n   startValue?: number\n   view: ViewType\n   message?: string\n   error?: string\n   setMaxValue?: (e: ChangeEvent<HTMLInputElement>) => void\n   setStartValue?: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const Display: React.FC<PropsType> = (props) => {\n   const {\n      count = 0,\n      maxValue = 1,\n      startValue = 0,\n      view,\n      setMaxValue,\n      setStartValue,\n      message,\n      error,\n   } = props;\n\n   return (\n      <div className={s.display}>\n         {\n            view === 'settings' ?\n               <div className={s.settings}>\n                  <div className={`${s.field} ${s.fieldFirst}`}>\n                     <div className={s.label}>\n                        <label> max value </label>\n                     </div>\n                     <div className={s.fieldItem}>\n                           <input type=\"number\"\n                                  value={maxValue}\n                                  size={10}\n                                  className={`${s.input} ${error ? s.error : ''}`}\n                                  onChange={setMaxValue}/>\n                     </div>\n                  </div>\n                  <div className={`${s.field} ${s.fieldSecond}`}>\n                     <div className={s.label}>\n                        <label> start value </label>\n                     </div>\n                     <div className={s.fieldItem}>\n                           <input type=\"number\"\n                                  value={startValue}\n                                  size={15}\n                                  className={`${s.input} ${error ? s.error : ''}`}\n                                  onChange={setStartValue}/>\n                     </div>\n                  </div>\n               </div> :\n               <div className={s.mainWindow}>\n                  {\n                     message ?\n                        <div className={error ? s.errorMessage : s.message}>\n                           {error ? error : message}\n                        </div> :\n                        <div className={`${s.total} ${count >= maxValue ? s.red : s.total}`}>\n                           {count}\n                        </div>\n                  }\n               </div>\n         }\n      </div>\n   );\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Button} from './components/Button/Button';\nimport {Display} from './components/Display/Display';\n\nfunction App() {\n   let [startValue, setStartValue] = useState<number>( JSON.parse(localStorage.getItem('start value') || '0'));\n   let [maxValue, setMaxValue] = useState<number>(JSON.parse(localStorage.getItem('max value') || '5'));\n\n   let [count, setCount] = useState<number>(startValue);\n   let [message, setMessage] = useState<string>('');\n   let [error, setError] = useState<string>('');\n   let [isDisabledSet, setIsDisabledSet] = useState<boolean>(true);\n\n   useEffect(() => {\n      if (startValue < 0 || maxValue <= startValue) {\n         setError('Incorrect value!');\n      } else {\n         setError('')\n      }\n   }, [startValue, maxValue]);\n\n   const increase = () => setCount(count + 1);\n   const reset = () => setCount(startValue);\n   const changeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setMaxValue && setMaxValue(+e.currentTarget.value);\n      setMessage(`enter values and press 'set'`);\n      setIsDisabledSet(false);\n   };\n   const changeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setStartValue && setStartValue(+e.currentTarget.value);\n      setMessage(`enter values and press 'set'`);\n      setIsDisabledSet(false);\n   };\n   const set = () => {\n      localStorage.setItem('start value',  JSON.stringify(startValue));\n      localStorage.setItem('max value', JSON.stringify(maxValue));\n\n      setCount(startValue);\n      setMessage('');\n      setIsDisabledSet(true);\n   }\n\n   return (\n      <div className='App'>\n\n         <div className='wrapper'>\n            <Display count={count}\n                     maxValue={maxValue}\n                     startValue={startValue}\n                     view='settings'\n                     error={error}\n                     setMaxValue={changeMaxValueHandler}\n                     setStartValue={changeStartValueHandler}\n            />\n            <div className='control'>\n               <Button onClick={set} isDisable={Boolean(error) || isDisabledSet}>SET</Button>\n            </div>\n         </div>\n\n         <div className='wrapper'>\n            <Display count={count}\n                     maxValue={maxValue}\n                     view='main'\n                     message={message}\n                     error={error}\n            />\n            <div className='control'>\n               <Button onClick={increase}\n                       isDisable={!isDisabledSet || count >= maxValue}>\n                  INC\n               </Button>\n               <Button onClick={reset}\n                       isDisable={!isDisabledSet || count === startValue}>\n                  RESET\n               </Button>\n            </div>\n         </div>\n\n      </div>\n   );\n}\n\nexport default App;\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}