{"version":3,"sources":["components/Display/Settins/SettingsWindow.module.css","components/Display/MainWindow/MainWindow.module.css","components/Button/Button.module.css","components/Display/Display.module.css","components/Button/Button.tsx","components/Display/Settins/SettingsWindow.tsx","components/Display/MainWindow/MainWindow.tsx","components/Display/Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","children","onClick","isDisable","restProps","useState","isMouseDown","setIsMouseDown","disabled","className","s","button","buttonDown","onMouseDown","onMouseUp","SettingsWindow","maxValue","startValue","setStartValue","setMaxValue","error","settings","field","fieldFirst","label","fieldItem","type","value","size","input","onChange","fieldSecond","MainWindow","start","finish","message","mainWindow","errorMessage","total","red","Display","count","view","display","App","JSON","parse","localStorage","getItem","setCount","setMessage","setError","settingsMode","setSettingsMode","showMainButtons","setShowMainButtons","useEffect","activateSettingsMode","set","setItem","stringify","e","currentTarget","Boolean","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3abe7b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"SettingsWindow_settings__26lcl\",\"field\":\"SettingsWindow_field__3RDm1\",\"fieldItem\":\"SettingsWindow_fieldItem__uZSFX\",\"fieldFirst\":\"SettingsWindow_fieldFirst__2Dm5U\",\"fieldSecond\":\"SettingsWindow_fieldSecond__2xH3Y\",\"label\":\"SettingsWindow_label__34cTU\",\"input\":\"SettingsWindow_input__3LcOc\",\"error\":\"SettingsWindow_error__eIm6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWindow\":\"MainWindow_mainWindow__2x4Lu\",\"total\":\"MainWindow_total__aNC-y\",\"message\":\"MainWindow_message__YWdZ1\",\"errorMessage\":\"MainWindow_errorMessage__3ombV\",\"red\":\"MainWindow_red__bYmdn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\",\"buttonDown\":\"Button_buttonDown__delwq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2n21m\"};","import React, {useState} from 'react';\nimport s from './Button.module.css';\n\ntype PropsType = {\n   onClick: () => void\n   isDisable?: boolean\n}\n\nexport const Button: React.FC<PropsType> = (props) => {\n   const {children, onClick, isDisable, ...restProps} = props;\n\n   const [isMouseDown, setIsMouseDown] = useState(false);\n\n   const onMouseDownHandler = () => setIsMouseDown(true);\n   const onMouseUpHandler = () => setIsMouseDown(false);\n\n   return (\n      <button disabled={isDisable}\n              onClick={onClick}\n              className={`${s.button} ${isMouseDown ? s.buttonDown : ''}`}\n              {...restProps}\n              onMouseDown={onMouseDownHandler}\n              onMouseUp={onMouseUpHandler}>\n         {children}\n      </button>\n   );\n}","import React, {ChangeEvent} from 'react';\nimport s from './SettingsWindow.module.css';\n\ntype PropsType = {\n   maxValue: number\n   startValue: number\n   setStartValue: (e: ChangeEvent<HTMLInputElement>) => void\n   setMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\n   error: string\n}\n\nexport function SettingsWindow(props: PropsType) {\n   const {maxValue, startValue, setStartValue, setMaxValue, error} = props;\n   return (\n      <div className={s.settings}>\n         <div className={`${s.field} ${s.fieldFirst}`}>\n            <div className={s.label}>\n               <label> max value </label>\n            </div>\n            <div className={s.fieldItem}>\n               <input type=\"number\"\n                      value={maxValue}\n                      size={10}\n                      className={`${s.input} ${error ? s.error : ''}`}\n                      onChange={setMaxValue}/>\n            </div>\n         </div>\n         <div className={`${s.field} ${s.fieldSecond}`}>\n            <div className={s.label}>\n               <label> start value </label>\n            </div>\n            <div className={s.fieldItem}>\n               <input type=\"number\"\n                      value={startValue}\n                      size={15}\n                      className={`${s.input} ${error ? s.error : ''}`}\n                      onChange={setStartValue}/>\n            </div>\n         </div>\n      </div>\n   );\n}","import s from './MainWindow.module.css';\nimport React from 'react';\n\ntype PropsType = {\n   start: number\n   finish: number\n   error: string\n   message: string\n}\n\nexport function MainWindow(props: PropsType) {\n   const {start, finish, error, message} = props;\n\n   return (\n      <div className={s.mainWindow}>\n         {\n            message ?\n               <div className={error ? s.errorMessage : s.message}>\n                  {error ? error : message}\n               </div> :\n               <div className={`${s.total} ${start >= finish ? s.red : s.total}`}>\n                  {start}\n               </div>\n         }\n      </div>\n   );\n}","import React, {ChangeEvent} from 'react';\nimport s from './Display.module.css';\nimport {SettingsWindow} from './Settins/SettingsWindow';\nimport {MainWindow} from './MainWindow/MainWindow';\n\nexport type ViewType = 'settings' | 'main';\nexport type PropsType = {\n   count: number\n   maxValue: number\n   startValue: number\n   view: ViewType\n   message: string\n   error: string\n   setMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\n   setStartValue: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const Display: React.FC<PropsType> = (props) => {\n   const {\n      count = 0,\n      maxValue = 1,\n      startValue = 0,\n      view,\n      setMaxValue,\n      setStartValue,\n      message,\n      error,\n   } = props;\n\n   return (\n      <div className={s.display}>\n         {\n            view === 'settings' ?\n               <SettingsWindow startValue={startValue}\n                               maxValue={maxValue}\n                               setStartValue={setStartValue}\n                               setMaxValue={setMaxValue}\n                               error={error}  /> :\n               <MainWindow start={count}\n                           finish={maxValue}\n                           message={message}\n                           error={error}/>\n         }\n      </div>\n   );\n}\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Button} from './components/Button/Button';\nimport {Display} from './components/Display/Display';\n\nfunction App() {\n   let [startValue, setStartValue] = useState<number>(JSON.parse(localStorage.getItem('start value') || '0'));\n   let [maxValue, setMaxValue] = useState<number>(JSON.parse(localStorage.getItem('max value') || '5'));\n\n   let [count, setCount] = useState<number>(startValue);\n   let [message, setMessage] = useState<string>('');\n   let [error, setError] = useState<string>('');\n\n   let [settingsMode, setSettingsMode] = useState<boolean>(false);\n   let [showMainButtons, setShowMainButtons] = useState<boolean>(true);\n\n   useEffect(() => {\n      if (startValue < 0 || maxValue <= startValue) {\n         setError('Incorrect value!');\n      } else {\n         setError('')\n      }\n   }, [startValue, maxValue]);\n\n   const activateSettingsMode = () => {\n      setSettingsMode(true);\n      setShowMainButtons(false);\n   };\n   const deactivateSettingsMode = () => setSettingsMode(false);\n\n   const increase = () => setCount(count + 1);\n   const reset = () => setCount(startValue);\n   const changeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setMaxValue && setMaxValue(+e.currentTarget.value);\n      setMessage(`enter values and press 'set'`);\n   };\n   const changeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setStartValue && setStartValue(+e.currentTarget.value);\n      setMessage(`enter values and press 'set'`);\n   };\n   const set = () => {\n      localStorage.setItem('start value', JSON.stringify(startValue));\n      localStorage.setItem('max value', JSON.stringify(maxValue));\n\n      setCount(startValue);\n      deactivateSettingsMode();\n      setMessage('');\n      setShowMainButtons(true);\n   }\n\n   return (\n      <div className='App'>\n         <div className='wrapper'>\n            <Display count={count}\n                     maxValue={maxValue}\n                     view={settingsMode ? 'settings' : 'main'}\n                     message={message}\n                     error={error}\n\n                     setMaxValue={changeMaxValueHandler}\n                     setStartValue={changeStartValueHandler}\n                     startValue={startValue}\n            />\n            <div className='control'>\n               {\n                  showMainButtons ?\n                     <>\n                        <Button onClick={increase}\n                                isDisable={count >= maxValue}>\n                           INC\n                        </Button>\n                        <Button onClick={reset}\n                                isDisable={count === startValue}>\n                           RESET\n                        </Button>\n                        <Button onClick={settingsMode ? set : activateSettingsMode}\n                                isDisable={Boolean(error)}>\n                           SET\n                        </Button>\n                     </> :\n                     <Button onClick={settingsMode ? set : activateSettingsMode}\n                             isDisable={Boolean(error)}>\n                        SET\n                     </Button>\n               }\n            </div>\n         </div>\n\n      </div>\n   );\n}\n\nexport default App;\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}